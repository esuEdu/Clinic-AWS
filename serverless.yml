# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: eduardorvieira
# "service" is the name of this project. This will also be added to your AWS resource names.
service: Clinic-aws

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    STAGE: ${sls:stage}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "events:*"
            - "dynamodb:*"
            - "cognito-idp:*"
          Resource: "*"
  httpApi:
    cors: true
    authorizers:
      apiKeyAuthorizer:
        type: request
        functionName: apiKeyAuthorization
        identitySource: $request.header.api-key

# Lambda functions
functions:

  # Patient functions
  createPatient:
    handler: src/patient/functions/createPatient.handler
    name: ${sls:stage}-createPatient
    events:
      - httpApi:
          method: post
          path: /patient
          authorizer:
            name: apiKeyAuthorizer

  getPatients:
    handler: src/patient/functions/getPatients.handler
    name: ${sls:stage}-getPatients
    events:
      - httpApi:
          method: get
          path: /patients
          authorizer:
            name: apiKeyAuthorizer

  getPatient:
    handler: src/patient/functions/getPatient.handler
    name: ${sls:stage}-getPatient
    events:
      - httpApi:
          method: get
          path: /patient/{id}
          authorizer:
            name: apiKeyAuthorizer

  updatePatient:
    handler: src/patient/functions/updatePatient.handler
    name: ${sls:stage}-updatePatient
    events:
      - httpApi:
          method: put
          path: /patient
          authorizer:
            name: apiKeyAuthorizer

# Auth functions
  login:
    handler: src/auth/functions/login.handler
    name: ${sls:stage}-login
    events:
      - httpApi:
          method: post
          path: /auth/login
          authorizer:
            name: apiKeyAuthorizer

  signup:
    handler: src/auth/functions/signup.handler
    name: ${sls:stage}-signup
    events:
      - httpApi:
          method: post
          path: /auth/signup
          authorizer:
            name: apiKeyAuthorizer  

  confirmSignup:
    handler: src/auth/functions/confirmSignup.handler
    name: ${sls:stage}-confirmSignup
    events:
      - httpApi:
          method: post
          path: /auth/confirmSignup
          authorizer:
            name: apiKeyAuthorizer

  resendCode:
    handler: src/auth/functions/resendCode.handler
    name: ${sls:stage}-resendCode
    events:
      - httpApi:
          method: post
          path: /auth/resendCode
          authorizer:
            name: apiKeyAuthorizer

  forgotPassword:
    handler: src/auth/functions/forgotPassword.handler
    name: ${sls:stage}-forgotPassword
    events:
      - httpApi:
          method: post
          path: /auth/forgotPassword
          authorizer:
            name: apiKeyAuthorizer

  confirmForgotPassword:
    handler: src/auth/functions/confirmForgotPassword.handler
    name: ${sls:stage}-confirmForgotPassword
    events:
      - httpApi:
          method: post
          path: /auth/confirmForgotPassword
          authorizer:
            name: apiKeyAuthorizer

  # authorization:
  apiKeyAuthorization:
    handler: src/authorization/functions/apiKeyAuthorization.handler
    name: ${sls:stage}-apiKeyAuthorization
  

resources:
  Resources:
  # Dynamo Patient Table
    PatientTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-PatientTable
        AttributeDefinitions:
          - AttributeName: PK # Patient id
            AttributeType: S
        KeySchema:
          - AttributeName: PK # Patient id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        OnDemandThroughput:
          MaxReadRequestUnits: 5
          MaxWriteRequestUnits: 5
        Tags:
          - Key: Name
            Value: PatientTable


  # Cognito User Pool
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${sls:stage}-ClinicUserPool
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        Schema:
          - Name: email
            Required: true
            Mutable: true
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: OFF
        EmailVerificationSubject: Your verification code
        EmailVerificationMessage: Your verification code is {####}
        SmsVerificationMessage: Your verification code is {####}
        SmsAuthenticationMessage: Your authentication code is {####}
        UserPoolTags:
          "Name": "${sls:stage}-ClinicUserPool"

    # Cognito User Pool Client
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${sls:stage}-ClinicUserPoolClient
        UserPoolId:
          Ref: UserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH
        SupportedIdentityProviders:
          - COGNITO
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        CallbackURLs:
          - http://localhost:3000/callback
        LogoutURLs:
          - http://localhost:3000/callback

    # Cognito User Pool Groups
    AdminPoolGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: ${sls:stage}-Admins
        Description: Admins users with elevated permissions
        Precedence: 1
        UserPoolId:
          Ref: UserPool

    UserPoolGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: ${sls:stage}-Users
        Description: Users with basic permissions
        Precedence: 0
        UserPoolId:
          Ref: UserPool