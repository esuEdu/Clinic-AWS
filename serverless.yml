# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: eduardorvieira
# "service" is the name of this project. This will also be added to your AWS resource names.
service: Clinic-aws

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    STAGE: ${sls:stage}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "events:*"
            - "dynamodb:*"
            - "cognito-idp:*"
          Resource: "*"
  httpApi:
    authorizers:
      cognitoAuthorizer:
        identitySource: 
          - $request.header.Authorization
        issuerUrl: {"Fn::Join": ["", ["https://cognito-idp.us-east-1.amazonaws.com/", { Ref: CognitoUserPool }]]}
        audience: 
          - Ref: CognitoUserPoolClient
              
custom:
  stage: ${sls:stage}
  coginitoFiles:
    userPool: ${file(resources/cognito-user-pool.yml)}
    groups: ${file(resources/cognito-groups.yml)}

# Lambda functions
functions:
  createPatient:
    handler: src/patient/functions/createPatient.handler
    name: ${sls:stage}-createPatient
    events:
      - httpApi:
          method: post
          path: /patient

  getPatients:
    handler: src/patient/functions/getPatients.handler
    name: ${sls:stage}-getPatients
    events:
      - httpApi:
          method: get
          path: /patients

  getPatient:
    handler: src/patient/functions/getPatient.handler
    name: ${sls:stage}-getPatient
    events:
      - httpApi:
          method: get
          path: /patient
          authorizer: cognitoAuthorizer

  updatePatient:
    handler: src/patient/functions/updatePatient.handler
    name: ${sls:stage}-updatePatient
    events:
      - httpApi:
          method: put
          path: /patient

  deletePatient:
    handler: src/patient/functions/deletePatient.handler
    name: ${sls:stage}-deletePatient
    events:
      - httpApi:
          method: delete
          path: /patient
            
# Auth functions
  login:
    handler: src/auth/functions/login.handler
    name: ${sls:stage}-login
    events:
      - httpApi:
          method: post
          path: /auth/login

  signup:
    handler: src/auth/functions/signup.handler
    name: ${sls:stage}-signup
    events:
      - httpApi:
          method: post
          path: /auth/signup

  confirmSignup:
    handler: src/auth/functions/confirmSignup.handler
    name: ${sls:stage}-confirmSignup
    events:
      - httpApi:
          method: post
          path: /auth/confirmSignup

  resendCode:
    handler: src/auth/functions/resendCode.handler
    name: ${sls:stage}-resendCode
    events:
      - httpApi:
          method: post
          path: /auth/resendCode

  forgotPassword:
    handler: src/auth/functions/forgotPassword.handler
    name: ${sls:stage}-forgotPassword
    events:
      - httpApi:
          method: post
          path: /auth/forgotPassword

  confirmForgotPassword:
    handler: src/auth/functions/confirmForgotPassword.handler
    name: ${sls:stage}-confirmForgotPassword
    events:
      - httpApi:
          method: post
          path: /auth/confirmForgotPassword

resources:
  - Resources:
  # Dynamo Patient Table
      PatientTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${sls:stage}-PatientTable
          AttributeDefinitions:
            - AttributeName: PK # Patient id
              AttributeType: S
          KeySchema:
            - AttributeName: PK # Patient id
              KeyType: HASH
          BillingMode: PAY_PER_REQUEST
          OnDemandThroughput:
            MaxReadRequestUnits: 5
            MaxWriteRequestUnits: 5

      HttpApi:
        DependsOn: CognitoUserPool
        
  - ${self:custom.coginitoFiles.userPool}
  - ${self:custom.coginitoFiles.groups}

